一、SDS的定义
	struct sdshdr {
		int len;
		int free;
		//用于保存字符串
		char buf[];
	};
	说明：
	 	free：属性值表示未使用字节数，0表示未分配使用空间
	 	len： 字符串长度子,不包含以字符串结尾'\0'。
	 	buf： char 类型数组
	SDS：遵循C字符串以'\0'的惯例，封装了分配额外的一个字节，并将末尾设置'\0',都是SDS函数完成。

	降低获取长度的复杂度。
	避免缓冲区溢出 sdscat先检查长度不够就先扩展。
	减少字符串修改带来的内存从分配次数。
	二进制安全， 可以保存二进制数据，C字符串中不能包含'\0'
	兼容部分C字符串函数,可以使用部分<string.h>函数

	对外主要API：
	sdsnew 创建资格
	sdsempty 
	sdsfree
	sdslen
	sdsavail
	sdsdup
	sdsclear
	sdscat
	sdscatsds
	sdscpy
	sdsgrowzero
	sdsrange
	sdsrim
	sdscmp


二、链表 
	基本所有链表实现可以参照linux内核模块 list.c
	typedef struct listNode {
		struct listNode *prev;
		struct listNode *next;
		void *value;
	} listNode;
	type stuct list {
		listNode *head;
		listNode *tail;
		unsinged long len;
		void *(*dup)(void *ptr);
		void *(*free)(void *ptr);
		int *(*match)(void *ptr, void *key);
	} list;

	特点：双端，可以前后访问，进行前序后后续遍历。
		  无环：NULL节点访问结束
		  前端和后端插入
		  封装操作函数。
		  注意：带有计数器，list长度访问复杂度O(1).

	函数：
	listSet__Method
	listGet__Methed ___为对应三个操作函数，宏定义实现。
	其他参照list操作。

三、字典
	保存key-value pair的抽象数据类型或者键值映射。
	redis数据库使用字典来作为底层实现。对数据库的增、删、改、查操作也是构建在对字典的操作之上。
	字典也是哈希列表结构的底层实现， 当一个哈希列表包含的键值比较多，又或者键值中的元素都是比较长时，redis使用字典表来实现。

	typedef struct dictht {
		dictEntry **table；
		unsigned long size；
		unsigned long sizemask；//size-1 固定
		unsigned long used；
	}；

	typedef struct dict {
		dictType *type;
		void *privdata;
		dictht ht[2];
		int trehashidx
	}
	//type和private属性是针对不同类型的键值对，为创建多态字典而设置的。l

	//************************************************************
	redis 支持字符串 hash  列表  集合 有序集合键值对是否和这个有关？
	//**************************************************************


	ht包含两个数组，数组中的每个项都是一个dictht哈希表，一般只使用ht[0]
	哈希表，ht[1]哈希表只会在对ht[0]进行rehash是使用。
	rehashinx 记录rehash进度，如果没有rehash它的值为-1；

	哈希算法和哈希冲突解决和普通hash无差异。


	rehash 功能
	当hash随着表中数据量的变化，哈希表保存的键值对会增加货减少，为了让hash表负载因子维持在合理范围之内，需要对哈希表大小进行相应的扩展或收缩。
	rehash重新散列步骤：
	 	1、为字典表ht[1]
	 	哈希表分配空间，这个哈希表的空间大小取决于要执行的操作，以及ht[0]当前包含的键值对数量。
	 	扩展 2的N次方 > used*2 
	 	收缩 2的N次方 < used*2 

	 	2、将ht[0]中所有的键对rehash到ht[1]上。
	 	3、释放ht[0],并将ht[1]设置为ht[0]，并创建ht[1]。

	 扩展收缩条件
	 	1、服务器没有在做BGSAVE或BGREWEITEAOF,负载因子大于1.
	 	2、服务器正在做BGSAVE或BGREWEITEAOF,负载因子大于5.

	 	BGSAVE或BGREWEITEAOF是什么？
	 	redis创建一个当前进程的子进程，子进程采用写时复制来优化进程的使用效率， 所以在进程存在期间，程序会提高扩展操作需要的负载因子，避免不必要的内存写入操作，最大限度的节约内存。
	 	负载因子为0.1时， 自动进行收缩操作。

	 渐进式 rehash
	 	为了在每次rehash不阻塞系统服务，每次rehash对服务器性能造成影响， 服务器不是一次性将ht[0]里面的所有键值rehash到ht[1],而是多次，渐进式的rehash。
	 	在对字典进行添加、删除、查找或者更新操作时程序除了执行指定的操作以外，还会顺带将ht[0]哈希表在rehashidx索引上的所有键值对rehash到ht[1]，当rehash工作完成后，程序将rehashidx属性的值增一。

	 	dictCreate
	 	dicAdd
	 	dicReplace
	 	dictFetchValue
	 	dictGetRandomKey
	 	dictDelete
	 	dictRelease

	 	redis:数据库和哈希键， 使用murmurhash2

	 	跳跃表

	 	整数集合intset
	 	typedef struct intset {
	 		uint32_t encoding;
	 		uint32_t length;
	 		int8_t contents[];
	 	};
	 	length记录整数集合包含元素数量，也即是contents数组的长度。
	 	contents数组的真正类型取决于encoding属性的值。

	 	升级：
	 	升级整数集合并添加新元素共分为散布进行：
	 	1、根据新元素的类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。
	 	2、将底层数组转换成与新元素相同类型，并将类型转换后的元素放置到正确的位上


	 	压缩表
	 	 压缩列表（ziplist）是列表键和哈希键的底层实现之一，当一个列表只包含少量列表项，并且每个列表项要么就是小整数值，要么就是长度比较短小的字符串， 那么redis就会使用压缩列表来做列表键的底层实现。

	 	 object encoding lst

	 	 压缩列表的构成
	 	 压缩列表是redis为了节约内存而开发的，是由一些列特殊编码的连续内存块组成的顺序型数据结构，一个压缩列表可以包含任何多个节点（entry），每个节点可以保存一个字节数组或者整数值。
	 	 zlbytes zltail zllen entry1 entry2 ..............entryN zlend
	 	 zlbytes：记录整个压缩列表占用的内存字节数，在对压缩列表进行内存重分配或者计算zlend的位置使用。
	 	 zltail：尾节点地址。
	 	 zllen：节点数量。如果等于UINT16_MAX时，节点的真实数量需要遍历。
	 	 entryN：节点
	 	 zllen：节点数。

	 	 压缩列表节点的构成：
	 	 previous_entry_length:
	 	 encoding:
	 	 content:
	 	 三个部分组成:
	 	 节点previous_entry_length：记录前一个节点的长度。
	 	 如果大约0XFE， 多占用4字节。
	 	 encoding记录节点的content保存数据的类型以及长度：
	 	 content:节点的值

	 	 ziplistNew
	 	 ziplistPush
	 	 ziplistInsert
	 	 ziplistIndex
	 	 ziplistFind
	 	 ziplistNext
	 	 ziplistPre
	 	 ziplistGet
	 	 ziplistDelete
	 	 ziplistDeleteRange
	 	 ziplistBlobLen
	 	 ziplistLen
	 	 目的：节约内存 用作列表键和哈希键
	 	 













